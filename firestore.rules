rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(docData) {
      return request.auth.uid == docData.ownerId;
    }
    
    function isAdmin() {
      // This is a placeholder for admin logic.
      // In a real app, check for a custom claim: request.auth.token.admin == true
      // or check a document in a dedicated 'admins' collection.
      return false; 
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAdmin();
      
      // Rules for 'linkedEntities' sub-collection
      match /linkedEntities/{entityId} {
        allow read, create, delete: if request.auth.uid == userId || isAdmin();
        // No updates allowed, linking/unlinking is create/delete
      }
    }

    // Rules for top-level 'collections'
    match /collections/{collectionId} {
      allow create: if isAuthenticated();
      allow read: if isAuthenticated() && (resource.data.isShared == true || isOwner(resource.data) || isAdmin());
      allow update, delete: if isAuthenticated() && (isOwner(resource.data) || isAdmin());

      // Rules for 'labels' sub-collection
      match /labels/{labelId} {
        allow create: if isAuthenticated() && (get(/databases/$(database)/documents/collections/$(collectionId)).data.ownerId == request.auth.uid || isAdmin());
        allow read: if isAuthenticated() && (get(/databases/$(database)/documents/collections/$(collectionId)).data.isShared == true || get(/databases/$(database)/documents/collections/$(collectionId)).data.ownerId == request.auth.uid || isAdmin());
        allow update, delete: if isAuthenticated() && (get(/databases/$(database)/documents/collections/$(collectionId)).data.ownerId == request.auth.uid || isAdmin());
      }
    }

    // Rules for top-level 'projects'
    match /projects/{projectId} {
        allow create: if isAuthenticated();
        allow read: if isAuthenticated() && (resource.data.isShared == true || isOwner(resource.data) || isAdmin());
        allow update, delete: if isAuthenticated() && (isOwner(resource.data) || isAdmin());

        // Rules for 'phases' sub-collection
        match /phases/{phaseId} {
            allow create: if isAuthenticated() && (get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid || isAdmin());
            allow read: if isAuthenticated() && (get(/databases/$(database)/documents/projects/$(projectId)).data.isShared == true || get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid || isAdmin());
            allow update, delete: if isAuthenticated() && (get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid || isAdmin());
        }

        // Rules for 'events' sub-collection
        match /events/{eventId} {
            allow create: if isAuthenticated() && (get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid || isAdmin());
            allow read: if isAuthenticated() && (get(/databases/$(database)/documents/projects/$(projectId)).data.isShared == true || get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid || isAdmin());
            allow update, delete: if isAuthenticated() && (get(/databases/$(database)/documents/projects/$(projectId)).data.ownerId == request.auth.uid || isAdmin());
        }
    }
  }
}