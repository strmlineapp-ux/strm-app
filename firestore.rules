rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check for admin role
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if the user is the owner
    function isOwner(resource) {
      return request.auth.uid == resource.data.ownerId;
    }

    match /collections/{collectionId} {
      // READ: 
      // - Allow if user is owner
      // - Allow if collection is shared
      // - Allow if user is an admin
      allow read: if isOwner(resource) || resource.data.isShared == true || isAdmin();
      
      // CREATE:
      // - Allow if user is authenticated and the ownerId matches their UID
      allow create: if request.auth != null && isOwner(request.resource);

      // UPDATE, DELETE:
      // - Allow if user is owner
      // - Allow if user is an admin
      allow update, delete: if isOwner(resource) || isAdmin();

      match /labels/{labelId} {
        // READ: 
        // - Allow if user can read the parent collection
        allow read: if get(parent).data.isShared == true || isOwner(get(parent)) || isAdmin();

        // CREATE:
        // - Allow if user is the owner of the parent collection
        allow create: if isOwner(get(parent));

        // UPDATE, DELETE:
        // - Allow if user is the owner of the parent collection
        allow update, delete: if isOwner(get(parent)) || isAdmin();
      }
    }
    
    match /users/{userId}/{document=**} {
    	// Allow users to read and write their own documents
      allow read, write: if request.auth.uid == userId || isAdmin();
    }
  }
}
